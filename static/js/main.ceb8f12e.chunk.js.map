{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","until/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","i","key","id","SearchBar","sortBy_options","handle_termChange","bind","handle_locationChange","handle_submitSearch","opt","sortBy","Object","keys","sortByOption","onClick","handle_sortBy_change","get_sortBy_class","setState","e","target","value","term","location","searchYelp","preventDefault","render_sortBy_options","onChange","placeholder","Yelp","apiEndpoint","browser_header","headers","Authorization","fetch","then","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","scrape_yelpResult_attribs","undefined","App","console","log","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ceb8f12e.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Business.css'\r\n\r\n\r\n\r\nexport class Business extends React.Component {\r\n    render(){\r\n        return (\r\n            <div className=\"Business\">\r\n                <div className=\"image-container\">\r\n                    <img src={this.props.business.imageSrc} alt=''/>\r\n                </div>\r\n                <h2>{this.props.business.name}</h2>\r\n                <div className=\"Business-information\">\r\n                    <div className=\"Business-address\">\r\n                    <p>{this.props.business.address}</p>\r\n                    <p>{this.props.business.city}</p>\r\n                    <p>{this.props.business.state} {this.props.business.zipCode}</p>\r\n                    </div>\r\n                    <div className=\"Business-reviews\">\r\n                    <h3>{this.props.business.category}</h3>\r\n                    <h3 className=\"rating\">{this.props.business.rating} stars}</h3>\r\n                    <p>{this.props.business.reviewCount} reviews</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react'\r\nimport './BusinessList.css'\r\nimport {Business} from '../Business/Business'\r\n\r\nexport class BusinessList extends React.Component{\r\n    render(){\r\n        return (\r\n            <div className=\"BusinessList\">\r\n                {this.props.businesses.map((business, i) => <Business key={business.id} business={business} />)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './SearchBar.css'\r\n\r\n\r\nexport class SearchBar extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            'term':'',\r\n            'location':'',\r\n            'sortBy':'best_match',\r\n        }\r\n\r\n        this.sortBy_options = {\r\n            'Best Matched': 'best_match',\r\n            'Highest Rated': 'rating',\r\n            'Most Reviews': 'review_count'\r\n        }\r\n        this.handle_termChange = this.handle_termChange.bind(this)\r\n        this.handle_locationChange = this.handle_locationChange.bind(this)\r\n        this.handle_submitSearch = this.handle_submitSearch.bind(this)\r\n    }\r\n\r\n    get_sortBy_class(opt){\r\n        return (opt===this.state.sortBy) ? 'active' : '';\r\n    }\r\n\r\n    render_sortBy_options(){\r\n        return Object.keys(this.sortBy_options).map(opt => {\r\n            const sortByOption = this.sortBy_options[opt];\r\n            return (\r\n                <li\r\n                    onClick={this.handle_sortBy_change.bind(this, sortByOption)}\r\n                    className={this.get_sortBy_class(sortByOption)}\r\n                    key={sortByOption}\r\n                > {opt} </li>\r\n                );\r\n        })\r\n    }\r\n\r\n    handle_sortBy_change(opt){\r\n        this.setState({'sortBy': opt})\r\n    }\r\n\r\n    handle_termChange(e){\r\n        this.setState({'term':e.target.value})\r\n    }\r\n\r\n    handle_locationChange(e){\r\n        this.setState({'location':e.target.value})\r\n    }\r\n\r\n    handle_submitSearch(e){\r\n        const [term, location, sortBy] = [this.state.term, this.state.location, this.state.sortBy]\r\n        this.props.searchYelp(term, location, sortBy)\r\n        e.preventDefault()\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <div className=\"SearchBar-sort-options\">\r\n                    <ul>\r\n                        {this.render_sortBy_options()}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"SearchBar-fields\">\r\n                    <input onChange={this.handle_termChange} placeholder=\"Search Businesses\" />\r\n                    <input onChange={this.handle_locationChange} placeholder=\"Where?\" />\r\n                </div>\r\n                <div onClick={this.handle_submitSearch} className=\"SearchBar-submit\">\r\n                    <a>Let's Go</a>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","\r\n//Client ID: hAtu3T89dvJo0NTOvgLeQQ\r\n\r\nexport const Yelp = {\r\n    search: function(term, location, sortBy){\r\n        /*\r\n         *  fetch() will not function correctly due to CORS restrictions\r\n         *\r\n         *  We can bypass this restriction with an API called CORS Anywhere.\r\n         *  CORS Anywhere will take requests sent to its API endpoint, make\r\n         *  them for the requesting app with the proper CORS permissions, and\r\n         *  then return the response back to the requesting app.\r\n         */\r\n        const API_KEY = \"6tfQ0d30a1nVbTBQ8xNcqN9ivqDpop-bF03MBa9C_hHXddwkfwRan5ZcpXyN9_73VqWNiKce3kQcLEgz-XxL-2szhcc9GpuuE30ekfi_ZfKR5gvusft59Dry1Jm8XXYx\"\r\n        const CORS_bypass = `https://cors-anywhere.herokuapp.com/`\r\n        const apiEndpoint = `https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`\r\n        const browser_header = {\r\n            headers: {\r\n                Authorization: `Bearer ${API_KEY}`\r\n            }\r\n        }\r\n\r\n        const scrape_yelpResult_attribs = (business) => Object({\r\n            \"id\":business.id,\r\n            \"imageSrc\":business.image_url,\r\n            \"name\":business.name,\r\n            \"address\":business.location.address1,\r\n            \"city\":business.location.city,\r\n            \"state\":business.location.state,\r\n            \"zipCode\":business.location.zip_code,\r\n            \"category\":business.categories.title,\r\n            \"rating\":business.rating,\r\n            \"reviewCount\":business.review_count,\r\n        })\r\n\r\n        return fetch(CORS_bypass+apiEndpoint, browser_header)\r\n                .then((response)=>response.json())\r\n                .then((jsonResponse)=>(jsonResponse)?jsonResponse.businesses.map(business=>scrape_yelpResult_attribs(business)):undefined)\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport {BusinessList} from '../BusinessList/BusinessList'\nimport {SearchBar} from '../SearchBar/SearchBar'\nimport {Yelp} from '../../until/Yelp'\n\n\n\nexport class App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      businesses: []\n    }\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location, sortBy){\n    console.log(term, location, sortBy)\n\n    Yelp.search(term, location, sortBy)\n      .then((businesses) => {this.setState({businesses:businesses}) });\n  }\n\n  get businesses(){\n    return (this.state.businesses)?this.state.businesses:[]\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>DELISH</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={this.state.businesses} />\n    </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}